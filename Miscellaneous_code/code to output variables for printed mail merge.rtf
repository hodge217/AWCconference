{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red255\green255\blue255;\red45\green45\blue45;
\red0\green0\blue255;\red101\green76\blue29;\red0\green0\blue109;\red0\green0\blue0;\red144\green1\blue18;
\red157\green0\blue210;\red230\green0\blue6;}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c23137\c23137\c23137;
\cssrgb\c0\c0\c100000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c0\c0\c0;\cssrgb\c63922\c8235\c8235;
\cssrgb\c68627\c0\c85882;\cssrgb\c93333\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # Example function to format activity details\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 def\cf4 \strokec4  \cf6 \strokec6 format_activities_by_day\cf4 \strokec4 (\cf7 \strokec7 group\cf4 \strokec4 ,\cf7 \strokec7 day\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     activities \strokec8 =\strokec4  group[group[\cf9 \strokec9 'timeslot_start'\cf4 \strokec4 ].dt.day_name() \strokec8 ==\strokec4  day]\cb1 \
\cb3     \cf10 \strokec10 if\cf4 \strokec4  activities.empty:\cb1 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf9 \strokec9 "None"\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 return\cf4 \strokec4  \cf9 \strokec9 '\cf11 \strokec11 \\n\cf9 \strokec9 '\cf4 \strokec4 .join(\cb1 \
\cb3         \cf5 \strokec5 f\cf9 \strokec9 "\'95 \cf5 \strokec5 \{\cf4 \strokec4 row[\cf9 \strokec9 'timeslot_start'\cf4 \strokec4 ].strftime(\cf9 \strokec9 '%I:%M %p'\cf4 \strokec4 )\cf5 \strokec5 \}\cf9 \strokec9  - \cf5 \strokec5 \{\cf4 \strokec4 row[\cf9 \strokec9 'Session'\cf4 \strokec4 ]\cf5 \strokec5 \}\cf9 \strokec9  with \cf5 \strokec5 \{\cf4 \strokec4 row[\cf9 \strokec9 'publisher'\cf4 \strokec4 ]\cf5 \strokec5 \}\cf9 \strokec9 "\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 for\cf4 \strokec4  _, row \cf10 \strokec10 in\cf4 \strokec4  activities.iterrows()\cb1 \
\cb3     )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 # Group by participant and aggregate activities\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 mail_merge_data \strokec8 =\strokec4  virtual_all.groupby(\cf9 \strokec9 'Email'\cf4 \strokec4 ).apply(\cb1 \
\cb3     \cf5 \strokec5 lambda\cf4 \strokec4  \cf7 \strokec7 group\cf4 \strokec4 : pd.Series(\{\cb1 \
\cb3         \cf9 \strokec9 'Virtual_Activities_Friday'\cf4 \strokec4 : format_activities_by_day(group, \cf9 \strokec9 'Friday'\cf4 \strokec4 ),\cb1 \
\cb3         \cf9 \strokec9 'Virtual_Activities_Saturday'\cf4 \strokec4 : format_activities_by_day(group, \cf9 \strokec9 'Saturday'\cf4 \strokec4 )\cb1 \
\cb3     \})\cb1 \
\cb3 ).reset_index()\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 # Add back in the participant's first and last names, as well as phones\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 virtual_mail_merge \strokec8 =\strokec4  pd.merge(mail_merge_data, registered[[\cf9 \strokec9 'Email'\cf4 \strokec4 , \cf9 \strokec9 'First Name'\cf4 \strokec4 , \cf9 \strokec9 'Last Name'\cf4 \strokec4 , \cf9 \strokec9 'phone'\cf4 \strokec4 ]].drop_duplicates(), \cf7 \strokec7 on\cf4 \strokec8 =\cf9 \strokec9 'Email'\cf4 \strokec4 , \cf7 \strokec7 how\cf4 \strokec8 =\cf9 \strokec9 'inner'\cf4 \strokec4 )\cb1 \
}